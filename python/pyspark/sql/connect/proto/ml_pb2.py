#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spark/connect/ml.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from pyspark.sql.connect.proto import relations_pb2 as spark_dot_connect_dot_relations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x16spark/connect/ml.proto\x12\rspark.connect\x1a\x1dspark/connect/relations.proto"\x81\x0f\n\nRemoteCall\x12V\n\x10\x63onstruct_object\x18\x01 \x01(\x0b\x32).spark.connect.RemoteCall.ConstructObjectH\x00R\x0f\x63onstructObject\x12S\n\x0f\x64\x65struct_object\x18\x02 \x01(\x0b\x32(.spark.connect.RemoteCall.DestructObjectH\x00R\x0e\x64\x65structObject\x12G\n\x0b\x63\x61ll_method\x18\x03 \x01(\x0b\x32$.spark.connect.RemoteCall.CallMethodH\x00R\ncallMethod\x12M\n\rcall_function\x18\x04 \x01(\x0b\x32&.spark.connect.RemoteCall.CallFunctionH\x00R\x0c\x63\x61llFunction\x1a\xd1\x04\n\x08\x41rgValue\x12!\n\x0bint32_value\x18\x01 \x01(\x05H\x00R\nint32Value\x12!\n\x0bint64_value\x18\x02 \x01(\x03H\x00R\nint64Value\x12!\n\x0b\x66loat_value\x18\x03 \x01(\x02H\x00R\nfloatValue\x12#\n\x0c\x64ouble_value\x18\x04 \x01(\x01H\x00R\x0b\x64oubleValue\x12\x1f\n\nbool_value\x18\x05 \x01(\x08H\x00R\tboolValue\x12#\n\x0cstring_value\x18\x06 \x01(\tH\x00R\x0bstringValue\x12\x34\n\x04list\x18\x07 \x01(\x0b\x32\x1e.spark.connect.RemoteCall.ListH\x00R\x04list\x12\x31\n\x03map\x18\x08 \x01(\x0b\x32\x1d.spark.connect.RemoteCall.MapH\x00R\x03map\x12\x35\n\x08relation\x18\t \x01(\x0b\x32\x17.spark.connect.RelationH\x00R\x08relation\x12M\n\rremote_object\x18\n \x01(\x0b\x32&.spark.connect.RemoteCall.RemoteObjectH\x00R\x0cremoteObject\x12:\n\x06vector\x18\x0b \x01(\x0b\x32 .spark.connect.RemoteCall.VectorH\x00R\x06vector\x12:\n\x06matrix\x18\x0c \x01(\x0b\x32 .spark.connect.RemoteCall.MatrixH\x00R\x06matrixB\n\n\x08\x61rg_type\x1a\x44\n\x04List\x12<\n\x07\x65lement\x18\x01 \x03(\x0b\x32".spark.connect.RemoteCall.ArgValueR\x07\x65lement\x1a\x9b\x01\n\x03Map\x12\x38\n\x03map\x18\x01 \x03(\x0b\x32&.spark.connect.RemoteCall.Map.MapEntryR\x03map\x1aZ\n\x08MapEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x38\n\x05value\x18\x02 \x01(\x0b\x32".spark.connect.RemoteCall.ArgValueR\x05value:\x02\x38\x01\x1a=\n\x0cRemoteObject\x12\x0e\n\x02id\x18\x01 \x01(\x03R\x02id\x12\x1d\n\nclass_name\x18\x02 \x01(\tR\tclassName\x1a"\n\x06Vector\x12\x18\n\x07\x65lement\x18\x01 \x03(\x01R\x07\x65lement\x1aX\n\x06Matrix\x12\x19\n\x08num_rows\x18\x01 \x01(\x05R\x07numRows\x12\x19\n\x08num_cols\x18\x02 \x01(\x05R\x07numCols\x12\x18\n\x07\x65lement\x18\x03 \x03(\x01R\x07\x65lement\x1as\n\x0f\x43onstructObject\x12\x1d\n\nclass_name\x18\x01 \x01(\tR\tclassName\x12\x41\n\narg_values\x18\x02 \x03(\x0b\x32".spark.connect.RemoteCall.ArgValueR\targValues\x1a]\n\x0e\x44\x65structObject\x12K\n\rremote_object\x18\x01 \x01(\x0b\x32&.spark.connect.RemoteCall.RemoteObjectR\x0cremoteObject\x1a\xbd\x01\n\nCallMethod\x12K\n\rremote_object\x18\x01 \x01(\x0b\x32&.spark.connect.RemoteCall.RemoteObjectR\x0cremoteObject\x12\x1f\n\x0bmethod_name\x18\x02 \x01(\tR\nmethodName\x12\x41\n\narg_values\x18\x03 \x03(\x0b\x32".spark.connect.RemoteCall.ArgValueR\targValues\x1a\x97\x01\n\x0c\x43\x61llFunction\x12\x1f\n\x0bmodule_name\x18\x01 \x01(\tR\nmoduleName\x12#\n\rfunction_name\x18\x02 \x01(\tR\x0c\x66unctionName\x12\x41\n\narg_values\x18\x03 \x03(\x0b\x32".spark.connect.RemoteCall.ArgValueR\targValuesB\x0b\n\tcall_typeB"\n\x1eorg.apache.spark.connect.protoP\x01\x62\x06proto3'
)


_REMOTECALL = DESCRIPTOR.message_types_by_name["RemoteCall"]
_REMOTECALL_ARGVALUE = _REMOTECALL.nested_types_by_name["ArgValue"]
_REMOTECALL_LIST = _REMOTECALL.nested_types_by_name["List"]
_REMOTECALL_MAP = _REMOTECALL.nested_types_by_name["Map"]
_REMOTECALL_MAP_MAPENTRY = _REMOTECALL_MAP.nested_types_by_name["MapEntry"]
_REMOTECALL_REMOTEOBJECT = _REMOTECALL.nested_types_by_name["RemoteObject"]
_REMOTECALL_VECTOR = _REMOTECALL.nested_types_by_name["Vector"]
_REMOTECALL_MATRIX = _REMOTECALL.nested_types_by_name["Matrix"]
_REMOTECALL_CONSTRUCTOBJECT = _REMOTECALL.nested_types_by_name["ConstructObject"]
_REMOTECALL_DESTRUCTOBJECT = _REMOTECALL.nested_types_by_name["DestructObject"]
_REMOTECALL_CALLMETHOD = _REMOTECALL.nested_types_by_name["CallMethod"]
_REMOTECALL_CALLFUNCTION = _REMOTECALL.nested_types_by_name["CallFunction"]
RemoteCall = _reflection.GeneratedProtocolMessageType(
    "RemoteCall",
    (_message.Message,),
    {
        "ArgValue": _reflection.GeneratedProtocolMessageType(
            "ArgValue",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_ARGVALUE,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.ArgValue)
            },
        ),
        "List": _reflection.GeneratedProtocolMessageType(
            "List",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_LIST,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.List)
            },
        ),
        "Map": _reflection.GeneratedProtocolMessageType(
            "Map",
            (_message.Message,),
            {
                "MapEntry": _reflection.GeneratedProtocolMessageType(
                    "MapEntry",
                    (_message.Message,),
                    {
                        "DESCRIPTOR": _REMOTECALL_MAP_MAPENTRY,
                        "__module__": "spark.connect.ml_pb2"
                        # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.Map.MapEntry)
                    },
                ),
                "DESCRIPTOR": _REMOTECALL_MAP,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.Map)
            },
        ),
        "RemoteObject": _reflection.GeneratedProtocolMessageType(
            "RemoteObject",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_REMOTEOBJECT,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.RemoteObject)
            },
        ),
        "Vector": _reflection.GeneratedProtocolMessageType(
            "Vector",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_VECTOR,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.Vector)
            },
        ),
        "Matrix": _reflection.GeneratedProtocolMessageType(
            "Matrix",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_MATRIX,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.Matrix)
            },
        ),
        "ConstructObject": _reflection.GeneratedProtocolMessageType(
            "ConstructObject",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_CONSTRUCTOBJECT,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.ConstructObject)
            },
        ),
        "DestructObject": _reflection.GeneratedProtocolMessageType(
            "DestructObject",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_DESTRUCTOBJECT,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.DestructObject)
            },
        ),
        "CallMethod": _reflection.GeneratedProtocolMessageType(
            "CallMethod",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_CALLMETHOD,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.CallMethod)
            },
        ),
        "CallFunction": _reflection.GeneratedProtocolMessageType(
            "CallFunction",
            (_message.Message,),
            {
                "DESCRIPTOR": _REMOTECALL_CALLFUNCTION,
                "__module__": "spark.connect.ml_pb2"
                # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall.CallFunction)
            },
        ),
        "DESCRIPTOR": _REMOTECALL,
        "__module__": "spark.connect.ml_pb2"
        # @@protoc_insertion_point(class_scope:spark.connect.RemoteCall)
    },
)
_sym_db.RegisterMessage(RemoteCall)
_sym_db.RegisterMessage(RemoteCall.ArgValue)
_sym_db.RegisterMessage(RemoteCall.List)
_sym_db.RegisterMessage(RemoteCall.Map)
_sym_db.RegisterMessage(RemoteCall.Map.MapEntry)
_sym_db.RegisterMessage(RemoteCall.RemoteObject)
_sym_db.RegisterMessage(RemoteCall.Vector)
_sym_db.RegisterMessage(RemoteCall.Matrix)
_sym_db.RegisterMessage(RemoteCall.ConstructObject)
_sym_db.RegisterMessage(RemoteCall.DestructObject)
_sym_db.RegisterMessage(RemoteCall.CallMethod)
_sym_db.RegisterMessage(RemoteCall.CallFunction)

if _descriptor._USE_C_DESCRIPTORS == False:

    DESCRIPTOR._options = None
    DESCRIPTOR._serialized_options = b"\n\036org.apache.spark.connect.protoP\001"
    _REMOTECALL_MAP_MAPENTRY._options = None
    _REMOTECALL_MAP_MAPENTRY._serialized_options = b"8\001"
    _REMOTECALL._serialized_start = 73
    _REMOTECALL._serialized_end = 1994
    _REMOTECALL_ARGVALUE._serialized_start = 413
    _REMOTECALL_ARGVALUE._serialized_end = 1006
    _REMOTECALL_LIST._serialized_start = 1008
    _REMOTECALL_LIST._serialized_end = 1076
    _REMOTECALL_MAP._serialized_start = 1079
    _REMOTECALL_MAP._serialized_end = 1234
    _REMOTECALL_MAP_MAPENTRY._serialized_start = 1144
    _REMOTECALL_MAP_MAPENTRY._serialized_end = 1234
    _REMOTECALL_REMOTEOBJECT._serialized_start = 1236
    _REMOTECALL_REMOTEOBJECT._serialized_end = 1297
    _REMOTECALL_VECTOR._serialized_start = 1299
    _REMOTECALL_VECTOR._serialized_end = 1333
    _REMOTECALL_MATRIX._serialized_start = 1335
    _REMOTECALL_MATRIX._serialized_end = 1423
    _REMOTECALL_CONSTRUCTOBJECT._serialized_start = 1425
    _REMOTECALL_CONSTRUCTOBJECT._serialized_end = 1540
    _REMOTECALL_DESTRUCTOBJECT._serialized_start = 1542
    _REMOTECALL_DESTRUCTOBJECT._serialized_end = 1635
    _REMOTECALL_CALLMETHOD._serialized_start = 1638
    _REMOTECALL_CALLMETHOD._serialized_end = 1827
    _REMOTECALL_CALLFUNCTION._serialized_start = 1830
    _REMOTECALL_CALLFUNCTION._serialized_end = 1981
# @@protoc_insertion_point(module_scope)
