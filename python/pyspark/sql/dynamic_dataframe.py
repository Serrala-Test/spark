"""
This code is autogenerated by `dev_utils/ddf_verbose_autocode.py`
"""

from __future__ import annotations
import typing

from pyspark.sql import DataFrame


class DynamicDataFrame(DataFrame):
    def __init__(self, df: DataFrame):
        super().__init__(df._jdf, df.sql_ctx)

    def alias(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().alias(*args, **kwargs))

    def checkpoint(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().checkpoint(*args, **kwargs))

    def coalesce(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().coalesce(*args, **kwargs))

    def crossJoin(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().crossJoin(*args, **kwargs))

    def distinct(self: DynamicDataFrame) -> DynamicDataFrame:
        return self.__class__(super().distinct())

    def drop(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().drop(*args, **kwargs))

    def dropDuplicates(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().dropDuplicates(*args, **kwargs))

    def dropna(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().dropna(*args, **kwargs))

    def fillna(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().fillna(*args, **kwargs))

    def filter(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().filter(*args, **kwargs))

    def exceptAll(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().exceptAll(*args, **kwargs))

    def hint(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().hint(*args, **kwargs))

    def intersect(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().intersect(*args, **kwargs))

    def intersectAll(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().intersectAll(*args, **kwargs))

    def join(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().join(*args, **kwargs))

    def limit(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().limit(*args, **kwargs))

    def localCheckpoint(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().localCheckpoint(*args, **kwargs))

    def orderBy(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().orderBy(*args, **kwargs))

    def repartition(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().repartition(*args, **kwargs))

    def repartitionByRange(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().repartitionByRange(*args, **kwargs))

    def replace(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().replace(*args, **kwargs))

    def sample(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().sample(*args, **kwargs))

    def sampleBy(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().sampleBy(*args, **kwargs))

    def select(self: DynamicDataFrame, *args) -> DynamicDataFrame:
        return self.__class__(super().select(*args))

    def selectExpr(self: DynamicDataFrame, *args) -> DynamicDataFrame:
        return self.__class__(super().selectExpr(*args))

    def sort(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().sort(*args, **kwargs))

    def sortWithinPartitions(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().sortWithinPartitions(*args, **kwargs))

    def subtract(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().subtract(*args, **kwargs))

    def transform(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().transform(*args, **kwargs))

    def union(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().union(*args, **kwargs))

    def unionByName(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().unionByName(*args, **kwargs))

    def withColumn(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().withColumn(*args, **kwargs))

    def withColumnRenamed(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().withColumnRenamed(*args, **kwargs))

    def withWatermark(self: DynamicDataFrame, *args, **kwargs) -> DynamicDataFrame:
        return self.__class__(super().withWatermark(*args, **kwargs))

    def randomSplit(self, *args, **kwargs):
        return [self.__class__(df) for df in super().randomSplit(*args, **kwargs)]

    def toDF(self) -> DataFrame:
        return DataFrame(self._jdf, self.sql_ctx)
