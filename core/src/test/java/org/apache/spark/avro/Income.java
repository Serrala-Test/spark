/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.avro;
@SuppressWarnings("all")
/** Schema generated by Kite */
@org.apache.avro.specific.AvroGenerated
public class Income extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Income\",\"namespace\":\"org.apache.spark.avro\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"id1\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '8600000US00601'\",\"default\":null},{\"name\":\"id2\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '00601'\",\"default\":null},{\"name\":\"geography\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '00601 5-Digit ZCTA, 006 3-Digit ZCTA'\",\"default\":null},{\"name\":\"median_income\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '11102'\",\"default\":null}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
    /** Type inferred from '8600000US00601' */
    @Deprecated public CharSequence id1;
    /** Type inferred from '00601' */
    @Deprecated public CharSequence id2;
    /** Type inferred from '00601 5-Digit ZCTA, 006 3-Digit ZCTA' */
    @Deprecated public CharSequence geography;
    /** Type inferred from '11102' */
    @Deprecated public Long median_income;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Income() {}

    /**
     * All-args constructor.
     */
    public Income(CharSequence id1, CharSequence id2, CharSequence geography, Long median_income) {
        this.id1 = id1;
        this.id2 = id2;
        this.geography = geography;
        this.median_income = median_income;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0: return id1;
            case 1: return id2;
            case 2: return geography;
            case 3: return median_income;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0: id1 = (CharSequence)value$; break;
            case 1: id2 = (CharSequence)value$; break;
            case 2: geography = (CharSequence)value$; break;
            case 3: median_income = (Long)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'id1' field.
     * Type inferred from '8600000US00601'
     */
    public CharSequence getId1() {
        return id1;
    }

    /**
     * Sets the value of the 'id1' field.
     * Type inferred from '8600000US00601'
     * @param value the value to set.
     */
    public void setId1(CharSequence value) {
        this.id1 = value;
    }

    /**
     * Gets the value of the 'id2' field.
     * Type inferred from '00601'
     */
    public CharSequence getId2() {
        return id2;
    }

    /**
     * Sets the value of the 'id2' field.
     * Type inferred from '00601'
     * @param value the value to set.
     */
    public void setId2(CharSequence value) {
        this.id2 = value;
    }

    /**
     * Gets the value of the 'geography' field.
     * Type inferred from '00601 5-Digit ZCTA, 006 3-Digit ZCTA'
     */
    public CharSequence getGeography() {
        return geography;
    }

    /**
     * Sets the value of the 'geography' field.
     * Type inferred from '00601 5-Digit ZCTA, 006 3-Digit ZCTA'
     * @param value the value to set.
     */
    public void setGeography(CharSequence value) {
        this.geography = value;
    }

    /**
     * Gets the value of the 'median_income' field.
     * Type inferred from '11102'
     */
    public Long getMedianIncome() {
        return median_income;
    }

    /**
     * Sets the value of the 'median_income' field.
     * Type inferred from '11102'
     * @param value the value to set.
     */
    public void setMedianIncome(Long value) {
        this.median_income = value;
    }

    /** Creates a new Income RecordBuilder */
    public static Builder newBuilder() {
        return new Builder();
    }

    /** Creates a new Income RecordBuilder by copying an existing Builder */
    public static Builder newBuilder(Builder other) {
        return new Builder(other);
    }

    /** Creates a new Income RecordBuilder by copying an existing Income instance */
    public static Builder newBuilder(Income other) {
        return new Builder(other);
    }

    /**
     * RecordBuilder for Income instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Income>
            implements org.apache.avro.data.RecordBuilder<Income> {

        private CharSequence id1;
        private CharSequence id2;
        private CharSequence geography;
        private Long median_income;

        /** Creates a new Builder */
        private Builder() {
            super(Income.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id1)) {
                this.id1 = data().deepCopy(fields()[0].schema(), other.id1);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.id2)) {
                this.id2 = data().deepCopy(fields()[1].schema(), other.id2);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.geography)) {
                this.geography = data().deepCopy(fields()[2].schema(), other.geography);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.median_income)) {
                this.median_income = data().deepCopy(fields()[3].schema(), other.median_income);
                fieldSetFlags()[3] = true;
            }
        }

        /** Creates a Builder by copying an existing Income instance */
        private Builder(Income other) {
            super(Income.SCHEMA$);
            if (isValidValue(fields()[0], other.id1)) {
                this.id1 = data().deepCopy(fields()[0].schema(), other.id1);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.id2)) {
                this.id2 = data().deepCopy(fields()[1].schema(), other.id2);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.geography)) {
                this.geography = data().deepCopy(fields()[2].schema(), other.geography);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.median_income)) {
                this.median_income = data().deepCopy(fields()[3].schema(), other.median_income);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'id1' field.
         * Type inferred from '8600000US00601'
         */
        public CharSequence getId1() {
            return id1;
        }

        /**
         * Sets the value of the 'id1' field.
         * Type inferred from '8600000US00601'
         * @param value the value to set.
         */
        public Builder setId1(CharSequence value) {
            validate(fields()[0], value);
            this.id1 = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id1' field has been set.
         * Type inferred from '8600000US00601'
         */
        public boolean hasId1() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id1' field.
         * Type inferred from '8600000US00601'
         */
        public Builder clearId1() {
            id1 = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'id2' field.
         * Type inferred from '00601'
         */
        public CharSequence getId2() {
            return id2;
        }

        /**
         * Sets the value of the 'id2' field.
         * Type inferred from '00601'
         * @param value the value to set.
         */
        public Builder setId2(CharSequence value) {
            validate(fields()[1], value);
            this.id2 = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'id2' field has been set.
         * Type inferred from '00601'
         */
        public boolean hasId2() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'id2' field.
         * Type inferred from '00601'
         */
        public Builder clearId2() {
            id2 = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'geography' field.
         * Type inferred from '00601 5-Digit ZCTA, 006 3-Digit ZCTA'
         */
        public CharSequence getGeography() {
            return geography;
        }

        /**
         * Sets the value of the 'geography' field.
         * Type inferred from '00601 5-Digit ZCTA, 006 3-Digit ZCTA'
         * @param value the value to set.
         */
        public Builder setGeography(CharSequence value) {
            validate(fields()[2], value);
            this.geography = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'geography' field has been set.
         * Type inferred from '00601 5-Digit ZCTA, 006 3-Digit ZCTA'
         */
        public boolean hasGeography() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'geography' field.
         * Type inferred from '00601 5-Digit ZCTA, 006 3-Digit ZCTA'
         */
        public Builder clearGeography() {
            geography = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'median_income' field.
         * Type inferred from '11102'
         */
        public Long getMedianIncome() {
            return median_income;
        }

        /**
         * Sets the value of the 'median_income' field.
         * Type inferred from '11102'
         * @param value the value to set.
         */
        public Builder setMedianIncome(Long value) {
            validate(fields()[3], value);
            this.median_income = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'median_income' field has been set.
         * Type inferred from '11102'
         */
        public boolean hasMedianIncome() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'median_income' field.
         * Type inferred from '11102'
         */
        public Builder clearMedianIncome() {
            median_income = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        public Income build() {
            try {
                Income record = new Income();
                record.id1 = fieldSetFlags()[0] ? this.id1 : (CharSequence) defaultValue(fields()[0]);
                record.id2 = fieldSetFlags()[1] ? this.id2 : (CharSequence) defaultValue(fields()[1]);
                record.geography = fieldSetFlags()[2] ? this.geography : (CharSequence) defaultValue(fields()[2]);
                record.median_income = fieldSetFlags()[3] ? this.median_income : (Long) defaultValue(fields()[3]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
